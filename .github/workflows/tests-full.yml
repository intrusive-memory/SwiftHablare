name: Full Test Suite (Manual)

on:
  # Only run manually - replaced by fast-tests.yml (PR) and integration-tests.yml (weekly)
  workflow_dispatch:

jobs:
  test:
    name: Full Test Suite (All Tests)
    runs-on: macos-26

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Select Xcode version
        run: sudo xcode-select -s /Applications/Xcode.app/Contents/Developer

      - name: Show Swift version
        run: swift --version

      - name: Show available simulators
        run: |
          echo "Available iOS Simulators:"
          xcrun simctl list devices available | grep "iPhone" | head -5

      - name: Build for iOS Simulator
        run: |
          echo "🔨 Building for iOS Simulator (not macOS)"
          xcodebuild build \
            -scheme SwiftHablare \
            -destination 'platform=iOS Simulator,name=Any iOS Simulator Device' \
            -skipPackagePluginValidation \
            | xcpretty || true

      - name: Clean test database
        run: |
          # Remove any existing test databases to prevent schema conflicts
          rm -rf ~/Library/Application\ Support/default.store*
          rm -rf ~/Library/Application\ Support/*.store

      - name: Run all tests on iOS Simulator (unit + integration)
        env:
          ELEVENLABS_API_KEY: ${{ secrets.ELEVENLABS_API_KEY }}
        run: |
          echo "🧪 Running FULL test suite on iOS Simulator (unit + integration)"
          echo "⚠️  Tests will NOT run on macOS - iOS Simulator only"
          echo "This is a manual workflow. Normally:"
          echo "  - Fast tests run on PRs (fast-tests.yml)"
          echo "  - Integration tests run weekly (integration-tests.yml)"
          echo ""

          # Run all tests including integration tests (if ELEVENLABS_API_KEY is set)
          if [ -n "$ELEVENLABS_API_KEY" ]; then
            echo "✅ ElevenLabs API key found - integration tests will run"
          else
            echo "⚠️  ElevenLabs API key not found - integration tests will be skipped"
          fi

          # Run all tests on iOS Simulator (not macOS)
          xcodebuild test \
            -scheme SwiftHablare \
            -destination 'platform=iOS Simulator,name=Any iOS Simulator Device' \
            -skipPackagePluginValidation \
            | tee test-output.log \
            | xcpretty --test --color

          # Capture exit code
          TEST_EXIT_CODE=${PIPESTATUS[0]}

          # Exit with the test exit code
          exit $TEST_EXIT_CODE

      - name: Run performance tests (iOS Simulator)
        if: always()
        continue-on-error: true
        run: |
          echo "📊 Running performance tests on iOS Simulator"
          # Run performance tests separately if they exist (on iOS Simulator, not macOS)
          xcodebuild test \
            -scheme SwiftHablare \
            -destination 'platform=iOS Simulator,name=Any iOS Simulator Device' \
            -skipPackagePluginValidation \
            -only-testing:SwiftHablareTests/PerformanceTests \
            2>&1 | tee performance-output.log || true

          # Extract performance metrics from output
          grep "PERFORMANCE_METRIC:" performance-output.log | sed 's/PERFORMANCE_METRIC: //' > performance-metrics.json || true

      - name: Generate coverage report
        if: false  # Disabled: coverage generation has object mismatch issues with isolated test instances
        run: |
          # Find the xctest bundle and profdata file without rebuilding
          XCTEST_PATH=$(find .build -name "*.xctest" | head -n 1)
          PROFDATA_PATH=$(find .build -name "*.profdata" | head -n 1)

          echo "XCTEST_PATH: $XCTEST_PATH"
          echo "PROFDATA_PATH: $PROFDATA_PATH"

          if [ -n "$PROFDATA_PATH" ] && [ -f "$PROFDATA_PATH" ] && [ -n "$XCTEST_PATH" ] && [ -d "$XCTEST_PATH" ]; then
            echo "Found profdata at: $PROFDATA_PATH"
            echo "Found xctest at: $XCTEST_PATH"

            # Generate coverage report
            xcrun llvm-cov report \
              "$XCTEST_PATH/Contents/MacOS/"* \
              -instr-profile="$PROFDATA_PATH" \
              -ignore-filename-regex=".build|Tests" \
              > coverage-report.txt

            # Generate detailed coverage export
            xcrun llvm-cov export \
              "$XCTEST_PATH/Contents/MacOS/"* \
              -instr-profile="$PROFDATA_PATH" \
              -ignore-filename-regex=".build|Tests" \
              -format=lcov \
              > coverage.lcov

            echo "Coverage report generated"
            cat coverage-report.txt
          else
            echo "Error: Could not find required files for coverage generation"
            [ -z "$PROFDATA_PATH" ] && echo "  - profdata file not found"
            [ -z "$XCTEST_PATH" ] && echo "  - xctest bundle not found"
            exit 1
          fi

      - name: Extract test summary
        if: always()
        run: |
          echo "## Test Results" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f test-output.log ]; then
            # Extract test results from swift test output
            # Get the last "Executed X tests" line which has the total
            LAST_EXECUTION_LINE=$(grep "Executed.*test" test-output.log | tail -n 1)

            if [ -n "$LAST_EXECUTION_LINE" ]; then
              # Extract numbers from the line
              TOTAL_TESTS=$(echo "$LAST_EXECUTION_LINE" | grep -o "Executed [0-9]*" | grep -o "[0-9]*")
              FAILURES=$(echo "$LAST_EXECUTION_LINE" | grep -o "with [0-9]* failure" | grep -o "[0-9]*")

              if [ -z "$FAILURES" ]; then
                FAILURES=0
              fi

              PASSED=$((TOTAL_TESTS - FAILURES))

              # Display results
              if [ "$FAILURES" -eq 0 ]; then
                echo "✅ **All tests passed:** $TOTAL_TESTS/$TOTAL_TESTS tests" >> $GITHUB_STEP_SUMMARY
              else
                echo "❌ **Failed:** $FAILURES/$TOTAL_TESTS tests" >> $GITHUB_STEP_SUMMARY
                echo "✅ **Passed:** $PASSED/$TOTAL_TESTS tests" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "Tests completed. Check job logs for detailed results." >> $GITHUB_STEP_SUMMARY
            fi

            # Check for integration test execution
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "### Integration Tests" >> $GITHUB_STEP_SUMMARY

            # Check if Apple integration tests ran
            if grep -q "AppleVoiceProviderIntegrationTests" test-output.log; then
              APPLE_TESTS=$(grep -c "✅.*apple-tts-.*\.aiff" test-output.log || echo "0")
              echo "- ✅ Apple Voice Provider: $APPLE_TESTS audio artifacts generated" >> $GITHUB_STEP_SUMMARY
            else
              echo "- ⚠️  Apple Voice Provider: No integration tests found" >> $GITHUB_STEP_SUMMARY
            fi

            # Check if ElevenLabs integration tests ran
            if grep -q "ElevenLabsVoiceProviderIntegrationTests" test-output.log; then
              if grep -q "ELEVENLABS_API_KEY.*not set.*skipping" test-output.log; then
                echo "- ⏭️  ElevenLabs: Tests skipped (no API key)" >> $GITHUB_STEP_SUMMARY
              else
                ELEVENLABS_TESTS=$(grep -c "✅.*elevenlabs-tts-.*\.mp3" test-output.log || echo "0")
                echo "- ✅ ElevenLabs: $ELEVENLABS_TESTS audio artifacts generated" >> $GITHUB_STEP_SUMMARY
              fi
            else
              echo "- ⚠️  ElevenLabs: No integration tests found" >> $GITHUB_STEP_SUMMARY
            fi
          else
            echo "No test output found" >> $GITHUB_STEP_SUMMARY
          fi

          # Add performance metrics section
          if [ -f performance-metrics.json ] && [ -s performance-metrics.json ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## Performance Metrics" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "| Metric | Value | Unit |" >> $GITHUB_STEP_SUMMARY
            echo "|--------|-------|------|" >> $GITHUB_STEP_SUMMARY

            # Parse each line of JSON metrics
            while IFS= read -r line; do
              if [ -n "$line" ]; then
                NAME=$(echo "$line" | grep -o '"name":"[^"]*"' | sed 's/"name":"//' | sed 's/"//')
                VALUE=$(echo "$line" | grep -o '"value":[0-9.]*' | sed 's/"value"://')
                UNIT=$(echo "$line" | grep -o '"unit":"[^"]*"' | sed 's/"unit":"//' | sed 's/"//')

                if [ -n "$NAME" ] && [ -n "$VALUE" ] && [ -n "$UNIT" ]; then
                  # Format value to 2 decimal places
                  VALUE_FORMATTED=$(printf "%.2f" "$VALUE")
                  echo "| $NAME | $VALUE_FORMATTED | $UNIT |" >> $GITHUB_STEP_SUMMARY
                fi
              fi
            done < performance-metrics.json
          fi

          if [ -f coverage-report.txt ]; then
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "## Coverage Summary" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY

            # Extract overall coverage percentage
            COVERAGE=$(grep -oE '[0-9]+\.[0-9]+%' coverage-report.txt | head -n 1)
            if [ -n "$COVERAGE" ]; then
              echo "**Overall Coverage:** $COVERAGE" >> $GITHUB_STEP_SUMMARY
              echo "" >> $GITHUB_STEP_SUMMARY
            fi

            echo "<details><summary>Detailed Coverage Report</summary>" >> $GITHUB_STEP_SUMMARY
            echo "" >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            cat coverage-report.txt >> $GITHUB_STEP_SUMMARY
            echo "\`\`\`" >> $GITHUB_STEP_SUMMARY
            echo "</details>" >> $GITHUB_STEP_SUMMARY
          fi

      - name: Generate coverage badge
        if: false  # Disabled: coverage generation is disabled
        run: |
          if [ -f coverage-report.txt ]; then
            .github/scripts/generate-coverage-badge.sh coverage-report.txt .github/coverage-badge.json
          fi

      - name: Upload test results and coverage
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results-and-coverage
          path: |
            test-output.log
            performance-output.log
            performance-metrics.json
            coverage-report.txt
            coverage.lcov
            .github/coverage-badge.json
            .build/*/TestArtifacts/**/*.aiff
            .build/*/TestArtifacts/**/*.mp3
          retention-days: 30

      - name: Check coverage threshold
        if: false  # Disabled: coverage generation is disabled
        run: |
          if [ -f coverage-report.txt ]; then
            # Extract overall coverage percentage
            COVERAGE=$(grep -oE '[0-9]+\.[0-9]+%' coverage-report.txt | head -n 1 | sed 's/%//')
            echo "Overall coverage: $COVERAGE%"

            # Check if coverage meets 80% threshold
            THRESHOLD=80
            if (( $(echo "$COVERAGE >= $THRESHOLD" | bc -l) )); then
              echo "✅ Coverage threshold met: $COVERAGE% >= $THRESHOLD%"
            else
              echo "⚠️  Coverage below threshold: $COVERAGE% < $THRESHOLD%"
              echo "::warning::Code coverage ($COVERAGE%) is below the threshold ($THRESHOLD%)"
            fi
          fi
